#!/system/bin/sh
#Recode/Edit? Create new branch and start pull requests/Fork so i know who's editing my script
#And adding a new author for that
#Made by MrAnonyWolf since March 12 2020 half with lots of mistakes and debugging/fixing lol
 N="\033[1;0m"
 Bl="\033[0;30m"
 DGr="\033[1;30m"
 R="\033[0;31m"
 LR="\033[1;31m"
 G="\033[0;32m"
 LG="\033[1;32m"
 Br="\033[0;33m"
 Y="\033[1;33m"
 B="\033[0;34m"
 LB="\033[1;34m"
 P="\033[0;35m"
 LP="\033[1;35m"
 C="\033[0;36m"
 LC="\033[1;36m"
 LGr="\033[0;37m"
 W="\033[1;37m"

check(){
loc=$(find /sdcard/Download)

for filename in $loc
do
        ext=${filename##*\.}
        case "$ext" in
  ${format}*) echo -e "${Y}$filename ${LR}is in the ${LB}directory"
             ;;
    esac
done
}
description(){
while true
do
echo -e "                        ${R}❲${LR}═════════${R}❲${Y}Description${R}❳${LR}═════════${R}❳"
echo -e " ${LR}Youtube Shell${LG}(${LR}YtShell${LG})${Y} is a bash coding tool for downloading videos and audios"
echo -e " ${Y}that uses support of Youtube-dl and ffmpeg. you can download videos nor audios"
echo -e " ${Y}on hundreds of websites available."
echo -e " ${Y}Note: Making up this tool to make it simpler to download without write codes"
echo -e "                           ${R}❲${LR}═════════${R}❲${Y}Usage${R}❳${LR}═════════${R}❳"
echo -e " ${Y}Experimental: To try testing the user custom format. if it cause problem,then"
echo -e " ${Y}it would have high chance to remove from the tool next update."
echo -e " ${Y}Over 100+ sites available to download the videos and audios using youtube-dl."
sleep 1
echo
echo -e -n "${R}❲${Y}Press ${LG}ENTER${Y} to continue${R}❳"; read cont;
granted
done
}
custom(){
while true
do
echo
echo -e "${LR}╔═════════════════════════╗"
echo -e "${LR}║ ${R}[${LC}R${R}]${Y}eturn${LR}/${R}[${LC}B${R}]${Y}ack to menu ${LR}║"
echo -e "${LR}╚═════════════════════════╝"
echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"; read link;
if [ $link > 0 ]
  then
      if [ $link = r ] || [ $link = R ] || [ $link = b ] || [ $link = B ]
        then
       granted
   else
       echo -e "  ${R}❲${LR}═════════${R}❲${Y}Checking Active Format${R}❳${LR}═════════${R}❳"
       sleep 1
       echo -e " ${LR}Link: ${LG}"$link
       sleep 0.5
       echo -e "${Y}Scanning..."
       youtube-dl -F $link
       echo -e "${Y}If you got an ${LR}error${Y}, check ${LG}connection${Y} and ${LB}retry ${Y}or Check the ${LR}link ${Y}if it is a ${LG}valid ${LR}link"
       echo -e -n "${R}❲${Y}Press ${LG}ENTER${Y} to continue${R}❳"; read cont;
     while true
     do
     echo
     echo -e "${LR}╔════════════════════════╗"
     echo -e "${LR}║ ${R}[${LC}R${R}]${Y}etry${LR}/${R}[${LC}B${R}]${Y}ack to menu ${LR}║"
     echo -e "${LR}╚════════════════════════╝"
     echo -e -n "${LR}Choose your ${LB}format${LR}${Y}(${LB}number${Y})${LR}: ${LG}"; read formnumb;
         if [ $formnumb > 0 ]
           then
               if [ $formnumb = R ] || [ $formnumb = r ]
                 then
                     custom
               else
                   if [ $formnumb = B ] || [ $formnumb = b ]
                     then
                     echo -e "${Y}Reverting back to ${LR}menu${Y}..."
                     sleep 1
                     granted
                   else
                       youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $formnumb $link
                       echo -e "${Y}Check your ${LB}download ${Y}folder. if it's ${LR}failed ${Y}to download, check your ${LG}connection${Y}/${LG}link${Y}/${LG}format number ${Y}and ${LB}try again ${Y}or rechoose the ${LR}number ${LG}correctly"
                                       sleep 1
                                       while true
                                       do
                                       echo
                                       echo -e -n "${Y}Would you like to ${LG}retry${R}(${LC}Y${LR}/${LC}N${R}) ${Y}or ${LR}quit${R}(${LC}Q${LR}/${LC}E${R})${Y}?${R}: ${LG}"
                                       read ask;
                                        case $ask in
                                                    [yY]) echo -e "${Y}Reverting ${LR}back${Y}..."
                                                          sleep 1
                                                          custom
                                                           ;;
                                                    [nN]) echo -e "${Y}Returning to ${LR}menu${Y}..."
                                                          sleep 1
                                                          granted
                                                           ;;
                                                    [qQeE]) echo
                                                            echo -e "${LG}Goodbye!"
                                                            sleep 2
                                                        echo -e "${R}Exiting."
                                                        sleep 0.R5
                                                        echo -e "${R}Exiting.."
                                                        sleep 0.5
                                                        echo -e "${R}Exiting..."
                                                          sleep 0.5
                                                          clear
                                                        exit
                                                            ;;
                                                         *) echo -e "${R}Please insert the ${LR}input ${R}correctly!"
                                                             ;;
                                                     esac
                                                 done
                fi
             fi
         else
             echo -e "${R}Please insert a ${LR}number${R}!"
             sleep 1
           fi
      done
             granted
           fi
else
    echo -e "${R}Please insert a ${LR}link${R}!"
      sleep 1
  fi
done
}
status(){
while true
do
echo
echo -e "${LR}╔═════════════════════════╗"
echo -e "${LR}║ ${R}[${LC}R${R}]${Y}eturn${LR}/${R}[${LC}B${R}]${Y}ack to menu ${LR}║"
echo -e "${LR}╚═════════════════════════╝"
echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"; read link;
if [ $link > 0 ]
  then
      if [ $link = r ] || [ $link = R ] || [ $link = b ] || [ $link = B ]
        then
       granted
   else
echo -e "  ${R}❲${LR}═════════${R}❲${Y}Status Link${R}❳${LR}═════════${R}❳"
sleep 1
echo -e " ${LR}Link: ${LG}"$link
sleep 0.5
echo -e "${Y}Scanning..."
echo
echo -e -n "${LR}Title: ${LG}"
youtube-dl $link --skip-download --get-title
echo
echo -e -n "${LR}Time duration: ${LG}"
youtube-dl $link --skip-download --get-duration
echo
echo -e -n "${LR}Filename: ${LG}"
youtube-dl $link --skip-download --get-filename
echo
echo -e -n "${LR}Format: ${LG}"
youtube-dl $link --skip-download --get-format
echo
echo -e -n "${LR}Thumbnail: ${LG}"
youtube-dl $link --skip-download --get-thumbnail
echo
echo -e -n "${LR}Url: ${LG}"
youtube-dl $link --skip-download --get-url
echo
echo -e -n "${LR}User agent: ${LG}"
youtube-dl $link --skip-download --dump-user-agent
echo
echo -e "${LR}Done!"
sleep 1
echo -e -n "${R}❲${Y}Press ${LG}ENTER${Y} to continue${R}❳"; read cont;
granted
    fi
else
    echo -e "${R}Please insert a ${LR}link${R}!"
      sleep 1
  fi
done
}
downloading(){
if [ ${location} = audio ]
  then
downaud(){
      loc=$(find /sdcard/Download -name "*.${format}")
      echo -e "${Y}If the download period is ${LR}interrupted ${Y}or has an ${LR}error${Y}, you can ${LG}retry ${Y}again"
      locaud
}
downaud
  else
downvid(){
      loc=$(find /sdcard/Download -name "*.${format}")
      echo -e "${Y}If the download period is ${LR}interrupted ${Y}or has an ${LR}error${Y}, you can ${LG}retry ${Y}again"
      locvid
}
downvid
    fi
}
locvid(){
                                       check
                                       sleep 1
                                       while true
                                       do
                                       echo
                                       echo -e -n "${Y}Would you like to ${LG}retry${R}(${LC}Y${LR}/${LC}N${R}) ${Y}or ${LR}quit${R}(${LC}Q${LR}/${LC}E${R})${Y}?${R}: ${LG}"
                                       read ask;
                                        case $ask in
                                                    [yY]) echo -e "${Y}Reverting back to ${LR}${location} menu${Y}..."
                                                          sleep 1
                                                          ${location}
                                                          ;;
                                                    [nN]) echo -e "${Y}Returning to ${LR}menu${Y}..."
                                                          sleep 1
                                                          granted
                                                           ;;
                                                    [qQeE]) echo
                                                            echo -e "${LG}Goodbye!"
                                                            sleep 2
                                                        echo -e "${R}Exiting."
                                                        sleep 0.R5
                                                        echo -e "${R}Exiting.."
                                                        sleep 0.5
                                                        echo -e "${R}Exiting..."
                                                          sleep 0.5
                                                          clear
                                                        exit
                                                            ;;
                                                         *) echo -e "${R}Please insert the ${LR}input ${R}correctly!"
                                                             ;;
                                                     esac
                                                 done
}
locaud(){
                                       check
                                       sleep 1
                                       while true
                                       do
                                       echo
                                       echo -e -n "${Y}Would you like to ${LG}retry${R}(${LC}Y${LR}/${LC}N${R}) ${Y}or ${LR}quit${R}(${LC}Q${LR}/${LC}E${R})${Y}?${R}: ${LG}"
                                       read ask;
                                        case $ask in
                                                    [yY]) echo -e "${Y}Reverting back to ${LR}${location} menu${Y}..."
                                                          sleep 1
                                                          ${location}
                                                          ;;
                                                    [nN]) echo -e "${Y}Returning to ${LR}menu${Y}..."
                                                          sleep 1
                                                          granted
                                                           ;;
                                                    [qQeE]) echo
                                                            echo -e "${LG}Goodbye!"
                                                            sleep 2
                                                        echo -e "${R}Exiting."
                                                        sleep 0.R5
                                                        echo -e "${R}Exiting.."
                                                        sleep 0.5
                                                        echo -e "${R}Exiting..."
                                                          sleep 0.5
                                                          clear
                                                        exit
                                                            ;;
                                                         *) echo -e "${R}Please insert the ${LR}input ${R}correctly!"
                                                             ;;
                                                     esac
                                                 done
}
audio(){
while true
do
location=audio
clear
banner
echo
sleep 0.5
echo -e "  ${R}❲${LR}═════════${R}❲${Y}Audio converting Menu${R}❳${LR}═════════${R}❳"
echo -e " ${LB}□ ${LG}1. ${Y}Motion Picture Expert Group-3(${LG}.mp3${Y})"
echo -e " ${LB}□ ${LG}2. ${Y}Motion Picture Expert Group-2(${LG}.mp2${Y})"
echo -e " ${LB}□ ${LG}3. ${Y}Ogg Vorbis(${LG}.ogg${Y})"
echo -e " ${LB}□ ${LG}4. ${Y}Advanced Audio Coding(${LG}.aac${Y})"
echo -e " ${LB}□ ${LG}5. ${Y}Windows Media Audio(${LG}.wma${Y})"
echo -e " ${LB}□ ${LG}6. ${Y}Free Lossless Audio Codec(${LG}.flac${Y})"
echo -e " ${LB}□ ${LG}7. ${Y}WaveForm(${LG}.waf${Y})"
echo -e " ${LB}□ ${LG}8. ${Y}Pulse Code Modulation(${LG}.pcm${Y})"
echo -e " ${LB}□ ${LG}9. ${Y}Audio Interchange(${LG}.aiff${Y})"
echo -e " ${LB}□ ${LG}10. ${Y}Custom Extension(${LG}Experimental${Y})"
echo -e " ${LR}■ ${R}[${LC}B${R}]${Y}ack${LR}/${R}[${LC}R${R}]${Y}eturn"
echo -e " ${LR}■ ${R}[${LC}Q${R}]${Y}uit${LR}/${R}[${LC}E${R}]${Y}xit"
echo -e -n " ${LR}╚═${R}❲${Y}Select${R}❳${LR}══➩${LG}"; read aud;
case $aud in
1) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}1 ${Y}selected ${R}(${LG}.mp3${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mp3
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
2) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}2 ${Y}selected ${R}(${LG}.mp2${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mp2
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
3) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}3 ${Y}selected ${R}(${LG}.ogg${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=ogg
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
4) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}4 ${Y}selected ${R}(${LG}.aac${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=aac
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
5) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}5 ${Y}selected ${R}(${LG}.wma${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=wma
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
6) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}6 ${Y}selected ${R}(${LG}.flac${R})  ${LR}║"
      echo -e "${LR}║ ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR} ║"
      echo -e "${LR}╚═════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=flac
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
7) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}7 ${Y}selected ${R}(${LG}.waf${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=waf
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
8) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}8 ${Y}selected ${R}(${LG}.pcm${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=pcm
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
9) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}9 ${Y}selected ${R}(${LG}.aiff${R})  ${LR}║"
      echo -e "${LR}║ ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR} ║"
      echo -e "${LR}╚═════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=aiff
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
10) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}10 ${Y}selected ${R}(${LG}experimental${R})  ${LR}║"
      echo -e "${LR}║    ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}      ║"
      echo -e "${LR}╚═════════════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   while true
                   do
                   echo
                   echo -e "${LR}╔════════════════════════════════════════════╗"
                   echo -e "${LR}║${Y}Example${LR}: ${LG}mp3, mp4, aiff, mkv, flav, swf, etc${LR}║"
                   echo -e "${LR}╚════════════════════════════════════════════╝"
                   echo -e -n "${LR}Type the ${LB}format${LR}: ${LG}"; read form;
                    if [ ${form} > 0 ]
                     then
                         if [ ${form} = C ] || [ ${form} = c ]
                           then
                              echo -e "${LR}Cancelled"
                              sleep 1
                              ${location}
                          else
                              format=${form}
                              echo -e "${Y}Downloading.."
                              youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" --audio-format $format --extract-audio ${down}
                              downloading
                            fi
                    else
                        echo -e "${R}Please ${LR}type ${R}it!"
                        sleep 0.5
                     fi
                   done
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
[bBrR]) granted
         ;;
  [qQeE]) while true
          do
          echo
          echo -e -n "${Y}Are you sure?${R}(${LG}Y${LR}/${LG}N${R})${Y}: ${LG}"; read sure;
          case $sure in
   [yY]) echo -e "${LG}Goodbye!"
         sleep 2
         echo -e "${R}Exiting."
         sleep 0.5
         echo -e "${R}Exiting.."
         sleep 0.5
         echo -e "${R}Exiting..."
         sleep 0.5
         clear
         exit
          ;;
   [nN]) echo -e "${LR}Cancelled"
         sleep 1
         ${location}
         ;;
        *) echo -e "${R}Please insert it ${LR}correctly${R}!"
           sleep 1
           ;;
      esac
     done
        ;;
    *) echo -e "${R}Please insert it ${LR}correctly${R}!"
       sleep 1
        ;;
esac
done
}
video(){
while true
do
location=video
clear
banner
echo
sleep 0.5
echo -e "  ${R}❲${LR}═════════${R}❲${Y}Video converting Menu${R}❳${LR}═════════${R}❳"
echo -e " ${LB}□ ${LG}1. ${Y}Motion Picture Expert Group-4(${LG}.mp4${Y})"
echo -e " ${LB}□ ${LG}2. ${Y}Motion Picture Expert Group(${LG}.mpeg${Y})"
echo -e " ${LB}□ ${LG}3. ${Y}Ogv Vorbis(${LG}.ogv${Y})"
echo -e " ${LB}□ ${LG}4. ${Y}Audio Video Interleaved(${LG}.avi${Y})"
echo -e " ${LB}□ ${LG}5. ${Y}Windows Media Video(${LG}.wmv${Y})"
echo -e " ${LB}□ ${LG}6. ${Y}QuickTime(${LG}.mov${Y})"
echo -e " ${LB}□ ${LG}7. ${Y}3rd Generation Partnership Project(${LG}.3gp${Y})"
echo -e " ${LB}□ ${LG}8. ${Y}WebM Player(${LG}.webm${Y})"
echo -e " ${LB}□ ${LG}9. ${Y}Motion Picture Expert Group(${LG}.mkv${Y})"
echo -e " ${LB}□ ${LG}10. ${Y}Custom Extension(${LG}Experimental${Y})"
echo -e " ${LR}■ ${R}[${LC}B${R}]${Y}ack${LR}/${R}[${LC}R${R}]${Y}eturn"
echo -e " ${LR}■ ${R}[${LC}Q${R}]${Y}uit${LR}/${R}[${LC}E${R}]${Y}xit"
echo -e -n " ${LR}╚═${R}❲${Y}Select${R}❳${LR}══➩${LG}"; read vid;
case $vid in
1) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}1 ${Y}selected ${R}(${LG}.mp4${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mp4
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   ownloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
2) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}2 ${Y}selected ${R}(${LG}.mpeg${R})  ${LR}║"
      echo -e "${LR}║ ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR} ║"
      echo -e "${LR}╚═════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mpeg
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
3) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}3 ${Y}selected ${R}(${LG}.ogv${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=ogv
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
4) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}4 ${Y}selected ${R}(${LG}.avi${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=avi
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
5) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}5 ${Y}selected ${R}(${LG}.wmv${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=wmv
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
6) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}6 ${Y}selected ${R}(${LG}.mov${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mov
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
7) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}7 ${Y}selected ${R}(${LG}.3gp${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=3gp
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
8) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}8 ${Y}selected ${R}(${LG}.webm${R})  ${LR}║"
      echo -e "${LR}║ ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR} ║"
      echo -e "${LR}╚═════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=webm
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
9) while true
      do
      echo
      echo -e "${LR}╔═══════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}9 ${Y}selected ${R}(${LG}.mkv${R}) ${LR}║"
      echo -e "${LR}║${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}║"
      echo -e "${LR}╚═══════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   format=mkv
                   echo -e "${Y}Downloading.."
                   youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                   downloading
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
10) while true
      do
      echo
      echo -e "${LR}╔═════════════════════════════════════╗"
      echo -e "${LR}║  ${Y}Option ${LB}10 ${Y}selected ${R}(${LG}experimental${R})  ${LR}║"
      echo -e "${LR}║    ${R}[${LC}C${R}]${Y}ancel to go back to menu${LR}      ║"
      echo -e "${LR}╚═════════════════════════════════════╝"
      echo -e -n "${LR}Insert ${LB}link${LR}: ${LG}"
      read down;
       if [ ${down} > 0 ]
         then
             if [ ${down} = C ] || [ ${down} = c ]
               then
                   echo -e "${LR}Cancelled"
                   sleep 1
                   ${location}
               else
                   while true
                   do
                   echo
                   echo -e "${LR}╔════════════════════════════════════════════╗"
                   echo -e "${LR}║${Y}Example${LR}: ${LG}mp3, mp4, aiff, mkv, flav, swf, etc${LR}║"
                   echo -e "${LR}╚════════════════════════════════════════════╝"
                   echo -e -n "${LR}Type the ${LB}format${LR}: ${LG}"; read form;
                    if [ $form > 0 ]
                     then
                         if [ $form = C ] || [ $form = c ]
                           then
                              echo -e "${LR}Cancelled"
                              sleep 1
                              ${location}
                          else
                              format=${form}
                              echo -e "${Y}Downloading.."
                              youtube-dl -o "/sdcard/Download/%(title)s.%(ext)s" -f $format ${down}
                              downloading
                            fi
                    else
                        echo -e "${R}Please ${LR}type ${R}it!"
                        sleep 0.5
                     fi
                   done
                 fi
      else
          echo -e "${R}Please ${LR}insert ${R}it!"
          sleep 0.5
        fi
      done
     ;;
[bBrR]) granted
         ;;
  [qQeE]) while true
          do
          echo
          echo -e -n "${Y}Are you sure?${R}(${LG}Y${LR}/${LG}N${R})${Y}: ${LG}"; read sure;
          case $sure in
   [yY]) echo -e "${LG}Goodbye!"
         sleep 2
         echo -e "${R}Exiting."
         sleep 0.5
         echo -e "${R}Exiting.."
         sleep 0.5
         echo -e "${R}Exiting..."
         sleep 0.5
         clear
         exit
          ;;
   [nN]) echo -e "${LR}Cancelled"
         sleep 1
         ${location}
         ;;
        *) echo -e "${R}Please insert it ${LR}correctly${R}!"
           sleep 1
           ;;
      esac
     done
        ;;
    *) echo -e "${R}Please insert it ${LR}correctly${R}!"
       sleep 1
        ;;
esac
done
}

granted(){
while true
do
banner(){
sleep 0.3
echo
echo -e "        ${Y}/\        /\  "
echo -e "       ${Y}/@ \      / @\  "
echo -e "      ${Y}| @@ \    / @@ |         ${LG}// ${LG}_____  __  "
echo -e "      ${Y}| @@@ |__| @@@ |        ${LG}// ${LG}/❏❏❏❏/ /❏/  "
echo -e "      ${Y}| @@@      @@@ |       ${LG}// ${LG}/❏❏❏\  /❏/___  "
echo -e "      ${Y}\/ __\   |__  \/      ${G}// ${G}___/❏/ /❏❏❏❏❏/  "
echo -e "      ${Y}_| | ${N}■${Y}\|\/ ${N}■${Y}  |_  ${R}[${LR}►${R}]${G}// /❏❏❏❏/ /❏/ /❏/  "
echo -e "      ${Y}\_ |_| ${DGr}●${Y} |_|  _/   "
echo -e "       ${Y}\_    ^     _/ /\_____   "
echo -e "        ${Y}_\        /_ /      /_ "
echo -e "       ${Y}\_   \/\/   _/\  _    /__  "
echo -e "       ${Y}\  v  \/  v  / \/ \     /  "
echo -e "       ${Y}/  |  vv  |  \_    \    \  "
echo -e "       ${Y}|  \  ||  /  |/__  |    /  "
echo -e "       ${Y}\_ /  ||  \ _/  /__/   _\  "
echo -e "        ${Y}\_|__||__|_/         _\  "
echo -e "       ${Y}/__\||/\||/__\_______/  "
}
choosing(){
read choose;
if [ $choose > 0 ]; then
  if [ $choose = 1 ]
    then
        video
  elif [ $choose = 2 ]
    then
        audio
  elif [ $choose = 3 ]
    then
        custom
  elif [ $choose = 4 ]
    then
        status
  elif [ $choose = 5 ]
    then
        description
  elif [ $choose = Q ] || [ $choose = q ] || [ $choose = E ] || [ $choose = e ]
    then
        echo -e "${LG}Goodbye!"
        sleep 2
        echo -e "${R}Exiting."
        sleep 0.5
        echo -e "${R}Exiting.."
        sleep 0.5
        echo -e "${R}Exiting..."
        sleep 0.5
        rm -rf 0
       clear
     exit
  else
      echo -e "${R}Please insert it ${LR}correctly${R}!"
      sleep 1
   fi
else
    echo -e "${R}Please insert it ${LR}correctly${R}!"
    sleep 1
  fi
}

clear
banner
sleep 0.5
printf "
     ${LR}╔════════════════════════════════════════╗
     ${LR}║${LG}Author: ${Y}MrAnonyWolf/K3m0n0-404          ${LR}║
     ${LR}║${LG}Github: ${Y}https://github.com/MrAnonyWolf  ${LR}║
     ${LR}╚════════════════════════════════════════╝
"
echo -e -n "${R}❲${LR}══════════════════╣"
m=$(date +%b)
d=$(date +%d)
y=$(date +%Y)
a=$(echo -e ${LC}$d $m $y)
if [ $d = 22 ]
  then
      if [ $m = Feb ]
        then
            echo -e -n "${LC}Author's HBD!"
       else
           echo -e -n ${LC}$a
         fi
elif [ $m = Feb ]
    then
        if [ $d = 22 ]
          then
              echo -e -n "${LC}Author's HBD!"
          else
              echo -n $a
            fi
else
 echo -n $a
fi
echo -e "${LR}╠══════════════════${R}❳"
echo -e "            ${LR}╔═════════════════════════╗"
echo -e "            ${LR}║ ${LG}1.   ${Y}Video converting   ${LR}║"
echo -e "            ${LR}║ ${LG}2.   ${Y}Audio converting   ${LR}║"
echo -e "            ${LR}║ ${LG}3.        ${Y}Custom        ${LR}║"
echo -e "            ${LR}║ ${LG}4.   ${Y}Check URL status   ${LR}║"
echo -e "            ${LR}║ ${LG}5.      ${Y}Description     ${LR}║"
echo -e "            ${LR}╠═════════════════════════╣"
echo -e "      ${LR}╔═════╣      ${R}[${LC}Q${R}]${Y}uit${LR}/${R}[${LC}E${R}]${Y}xit      ${LR}║"
echo -e "      ${LR}║     ╚═════════════════════════╝"
echo -e "      ${LR}║"
echo -e -n "      ${LR}╚═${R}❲${Y}Choose${R}❳${LR}══➩${LG}"
choosing
done
}

granted
#<<---Linux--->>
#Coming soon
otpylinux="/usr/local/bin/python"
otformlinux="/usr/local/bin/ffmpeg"
otloclinux="/usr/local/bin/youtube-dl"
loclinux="/usr/bin/youtube-dl"
formlinux="/usr/bin/ffmpeg"
pylinux="/usr/bin/python"

#<<---Termux--->>
loc="/data/data/com.termux/files/usr/bin/youtube-dl"
format="/data/data/com.termux/files/usr/bin/ffmpeg"
py="/data/data/com.termux/files/usr/bin/python"

#<<---Detection--->>
detect="/data/data/com.termux/"
#check if the device have termux if not then it will detect linux
if [ -e $detect ]
 then
#termux startup
if [ -e $loc ]
 then
     if [ -e $py ]
       then
           granted
       else
           printf "It seems you forgot to install python first. "
           while true
           do
           echo -n "Would you like to install it?(Y/N): "
           read comp;
             case $comp in
                         [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                          echo "Installing..."
                          sleep 0.5
                          pkg install python
                          echo "Done!"
                          sleep 0.5
                          echo "Now it should have no problem running it"
                          sleep 1
                            if [ -e $format ]
                              then
                                  granted
                              else
                                  printf "Without ffmpeg installed, it would have issues on formatting the video. "
                                  while true
                                  do
                                  echo -n "Would you like to install it?(Y/N): "
                                  read form;
                                    case $form in
                                                [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                                                  echo "Installing..."
                                                  sleep 0.5
                                                  pkg install ffmpeg
                                                  echo "Done!"
                                                  sleep 0.5
                                                  echo "All set. Continue running.."
                                                  sleep 1
                                                  granted
                                                   ;;
                                                [Nn] | no | No | nO | NO)
                                                  echo "Installation cancelled"
                                                  sleep 0.6
                                                  echo "Youtube-dl would have limitation with formatting the video. Webm only available"
                                                  sleep 3
                                                  echo "Starting..."
                                                  sleep 1
                                                  granted
                                                   ;;
                                                 *) echo "Please insert input correctly!"
                                                    sleep 1
                                                    ;;
                                                esac
                                            done
                                          fi
                                            ;;
                          [Nn] | no | No | nO | NO)
                                 echo "Installation cancelled"
                                                  sleep 0.6
                                                  echo "Youtube-dl needs python components to work!"
                                                  sleep 3
                                                  echo "Cancelling..."
                                                  sleep 1
                                                  exit
                                                   ;;
                                            *) echo "Please insert input correctly!"
                                                    sleep 1
                                                    ;;
                                                esac
                                            done
                                          fi
elif [ -e $loc ]
    then
        if [ -e $format ]
          then
             granted
         else
           printf "It seems you don't have ffmpeg installed. "
           while true
           do
           echo -n "Would you like to install it?(Y/N): "
           read comp;
             case $comp in
                         [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                          echo "Installing..."
                          sleep 0.5
                          pkg install ffmpeg
                          echo "Done!"
                          sleep 0.5
                          echo "Now it will able to format the video whether any types of file will available"
                          sleep 1
                            if [ -e $py ]
                              then
                                  granted
                              else
                                  printf "You forgot to install python.. without it, the Youtube-dl will unable to run. "
                                  while true
                                  do
                                  echo -n "Would you like to install it?(Y/N): "
                                  read form;
                                    case $form in
                                                [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                                                  echo "Installing..."
                                                  sleep 0.5
                                                  pkg install python
                                                  echo "Done!"
                                                  sleep 0.5
                                                  echo "It's working! Starting up.."
                                                  sleep 1
                                                  granted
                                                   ;;
                                                [Nn] | no | No | nO | NO)
                                                  echo "Installation cancelled"
                                                  sleep 0.6
                                                  echo "Youtube-dl needs python components to work!"
                                                  sleep 3
                                                  echo "Cancelling..."
                                                  sleep 1
                                                  exit
                                                   ;;
                                                 *) echo "Please insert input correctly!"
                                                    sleep 1
                                                    ;;
                                                esac
                                            done
                                          fi
                                            ;;
                                [Nn] | no | No | nO | NO)
                                    echo "Installation cancelled"
                                    sleep 0.6
                                    echo "Youtube-dl would have limitation with formatting the video. Webm only available"
                                    sleep 3
                               if [ -e $py ]
                           then
                               echo "Starting..."
                               sleep 1
                               granted
                           else
                               printf "It seems you forgot to install python first. "
                               while true
                               do
                               echo -n "Would you like to install it?(Y/N): "
                               read comp;
                             case $comp in
                                          [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                                              echo "Installing..."
                                              sleep 0.5
                                              pkg install python
                                              echo "Done!"
                                              sleep 0.5
                                              echo "Now it should have no problem running it except formatting.."
                                              sleep 1
                                              granted
                                              ;;
                                         [Nn] | no | No | nO | NO)
                                                  echo "Installation cancelled"
                                                  sleep 0.6
                                                  echo "Youtube-dl needs python components to work!"
                                                  sleep 3
                                                  echo "Cancelling..."
                                                  sleep 1
                                                  exit
                                                   ;;
                                                 *) echo "Please insert input correctly!"
                                                    sleep 1
                                                    ;;
                                                 esac
                                             done
                                           fi
                                            ;;
                *) echo "Please insert input correctly!"
                      sleep 1
                          ;;
                       esac
                    done
                  fi

 else
     printf "It seems you don't have Youtube-dl installed. "
     while true
     do
     echo -n "Would you like to install it first?(Y/N): "
     read setup;
       case $setup in
                    [Yy] | yes | Yes | yEs | yeS | YEs | YeS | yES | YES)
                     echo "Installing."
                     sleep 0.5
                     echo "Installing.."
                     sleep 0.5
                     echo "Installing..."
                   if [ -e $py ]
                     then
                     curl -s -L https://yt-dl.org/downloads/latest/youtube-dl -o /data/data/com.termux/files/usr/bin/youtube-dl
                     echo "Youtube-dl has been installed!"
                     echo "Activating access to youtube-dl..."
                     chmod a+rx /data/data/com.termux/files/usr/bin/youtube-dl
                     youtube-dl --version
                     echo "Done!"
                     sleep 1
                      if [ -e $loc ]
                       then
                           echo "Installation completed!"
                           sleep 2
                           granted
                       else
                         echo "Installation failed!"
                         sleep 1
                         exit
                        fi
                    else
                        echo "Installing python component.."
                         pkg install python
                         echo "Component installed!"
                     sleep 1
                     echo "Installing Youtube-dl..."
                     sleep 0.5
                     echo "This will take a while. Please wait..."
                     curl -s -L https://yt-dl.org/downloads/latest/youtube-dl -o /data/data/com.termux/files/usr/bin/youtube-dl
                     echo "Youtube-dl has been installed!"
                     echo "Activating access to youtube-dl..."
                     chmod a+rx /data/data/com.termux/files/usr/bin/youtube-dl
                     youtube-dl --version
                     echo "Done!"
                     sleep 1
                     if [ -e $loc ]
                       then
                           echo "Installation completed!"
                           sleep 2
                           granted
                     else
                         echo "Installation failed!"
                         sleep 1
                         exit
                        fi
                      fi
                         ;;
                    [Nn] | no | No | nO | NO)
                          echo "Installation is terminated.."
                          sleep 1
                          echo "Returning..."
                          sleep 0.5
                          exit
                          ;;
                       *) echo "Please insert input correctly!"
                          sleep 1
                          ;;
                      esac
                  done
                fi
#linux startup
#sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
else
  echo "Coming soon"
  sleep 1
  granted
fi
